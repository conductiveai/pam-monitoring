# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import my_service_pb2 as my__service__pb2


class MyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryCall = channel.unary_unary(
                '/MyService/UnaryCall',
                request_serializer=my__service__pb2.Request.SerializeToString,
                response_deserializer=my__service__pb2.Response.FromString,
                )
        self.ServerStreamingCall = channel.unary_stream(
                '/MyService/ServerStreamingCall',
                request_serializer=my__service__pb2.Request.SerializeToString,
                response_deserializer=my__service__pb2.Response.FromString,
                )
        self.ClientStreamingCall = channel.stream_unary(
                '/MyService/ClientStreamingCall',
                request_serializer=my__service__pb2.Request.SerializeToString,
                response_deserializer=my__service__pb2.Response.FromString,
                )
        self.BidirectionalStreamingCall = channel.stream_stream(
                '/MyService/BidirectionalStreamingCall',
                request_serializer=my__service__pb2.Request.SerializeToString,
                response_deserializer=my__service__pb2.Response.FromString,
                )


class MyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UnaryCall(self, request, context):
        """Unary RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStreamingCall(self, request, context):
        """Server streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStreamingCall(self, request_iterator, context):
        """Client streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidirectionalStreamingCall(self, request_iterator, context):
        """Bidirectional streaming RPC
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryCall': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryCall,
                    request_deserializer=my__service__pb2.Request.FromString,
                    response_serializer=my__service__pb2.Response.SerializeToString,
            ),
            'ServerStreamingCall': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStreamingCall,
                    request_deserializer=my__service__pb2.Request.FromString,
                    response_serializer=my__service__pb2.Response.SerializeToString,
            ),
            'ClientStreamingCall': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStreamingCall,
                    request_deserializer=my__service__pb2.Request.FromString,
                    response_serializer=my__service__pb2.Response.SerializeToString,
            ),
            'BidirectionalStreamingCall': grpc.stream_stream_rpc_method_handler(
                    servicer.BidirectionalStreamingCall,
                    request_deserializer=my__service__pb2.Request.FromString,
                    response_serializer=my__service__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UnaryCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MyService/UnaryCall',
            my__service__pb2.Request.SerializeToString,
            my__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStreamingCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/MyService/ServerStreamingCall',
            my__service__pb2.Request.SerializeToString,
            my__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStreamingCall(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/MyService/ClientStreamingCall',
            my__service__pb2.Request.SerializeToString,
            my__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidirectionalStreamingCall(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/MyService/BidirectionalStreamingCall',
            my__service__pb2.Request.SerializeToString,
            my__service__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
